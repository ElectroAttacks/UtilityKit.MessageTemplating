//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UtilityKit.MessageTemplating.Tests.Ressources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class DiagnosticMessages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal DiagnosticMessages() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("UtilityKit.MessageTemplating.Tests.Ressources.DiagnosticMessages", typeof(DiagnosticMessages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove overriden values.
        /// </summary>
        internal static string InvalidArgument_CodeFixRemove {
            get {
                return ResourceManager.GetString("InvalidArgument_CodeFixRemove", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Synchronize overriden value.
        /// </summary>
        internal static string InvalidArgument_CodeFixReplace {
            get {
                return ResourceManager.GetString("InvalidArgument_CodeFixReplace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This diagnostic indicates that the provided parameter values in the method invocation do not match the actual values in the code. It is essential to ensure that the parameter values accurately reflect the intended context in the code. Please review the method invocation and adjust the parameter values accordingly..
        /// </summary>
        internal static string InvalidArgument_Description {
            get {
                return ResourceManager.GetString("InvalidArgument_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of the parameter &apos;{0}&apos; does not match the expected value &apos;{1}&apos;.
        /// </summary>
        internal static string InvalidArgument_MessageFormat {
            get {
                return ResourceManager.GetString("InvalidArgument_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter values mismatch.
        /// </summary>
        internal static string InvalidArgument_Title {
            get {
                return ResourceManager.GetString("InvalidArgument_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a unique identifier.
        /// </summary>
        internal static string MissingIdentifier_CodeFix {
            get {
                return ResourceManager.GetString("MissingIdentifier_CodeFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This diagnostic highlights the requirement to provide a unique identifier when using multiple attributes. In cases where multiple attributes are used, a unique identifier must be specified for each attribute to prevent conflicts and ensure proper differentiation..
        /// </summary>
        internal static string MissingIdentifier_Description {
            get {
                return ResourceManager.GetString("MissingIdentifier_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When using multiple attributes, a unique identifier must be specified for each attribute.
        /// </summary>
        internal static string MissingIdentifier_MessageFormat {
            get {
                return ResourceManager.GetString("MissingIdentifier_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unique identifier required.
        /// </summary>
        internal static string MissingIdentifier_Title {
            get {
                return ResourceManager.GetString("MissingIdentifier_Title", resourceCulture);
            }
        }
    }
}
